#!/usr/bin/env python
import sys
import json
import random
import datetime
import requests
import time
import os
import math
from subprocess import call

def speech(text):
    global o
    o["speech"] = {"text": text}

# Set Homeassistant data
hassurl, hassauth = "http://YOURIP:8123", "YOURHASSKEY"
hassheaders = {"Authorization": "Bearer " + hassauth, "content-type": "application/json",}

# Set OpenWeatherMap data
opnwthrurl, opnwthrauth, opnwthrlat, opnwthrlon, opnwthrunits = "https://api.openweathermap.org/data/2.5/weather?", "OPENWEATHERAPIKEY", "YOURLAT" , "YOURLONG", "metric"

# Set paths
workingDir = "/profiles/"
bluetoothFilePath, stopFilePath, timerLeftPath = workingDir+"bluetoothFile", workingDir+"stopFile", workingDir+"timerLeft"

# get json from stdin and load into python dict
o = json.loads(sys.stdin.read())
intent = o["intent"]["name"]

if intent == "GetTime":
    now = datetime.datetime.now()
    if now.strftime('%p') == "PM":
        apm = "peey em"
    else:
        apm = "ey em"
    if now.strftime('%M') == 00:
        speech("It's " + now.strftime('%I') + " " + apm)
    else:
        speech("It's " + now.strftime('%I') + " " + now.strftime('%M') + " " + apm) 

elif intent == "Greet":
    replies = ['Hi!', 'Hello!', 'Hey there!', 'Greetings.']
    speech(random.choice(replies))

elif intent == "SetSpecificLightPower":
    entity, state = o["slots"]["entity"], o["slots"]["state"]
    speech("Alright, I'll turn it " + state)
    requests.post(hassurl+"/api/events/rhasspy_"+intent, headers = hassheaders, json = {"entity": entity,"state": state})

elif intent == "SetSpecificLightColour":
    entity, colour = o["slots"]["entity"], o["slots"]["colour"]
    speech("Alright, I'll make it " + colour )
    requests.post(hassurl+"/api/events/rhasspy_"+intent, headers = hassheaders, json = {"entity": entity,"colour": colour})

elif intent == "DoMaths":
    operator, num1, num2 = o["slots"]["operator"], o["slots"]["num1"], o["slots"]["num2"]
    if operator == "*":
        calcResult = str(num1*num2)
    elif operator == "+":
        calcResult = str(num1+num2)
    elif operator == "-":
        calcResult = str(num1-num2)
    elif operator == "/":
        calcResult = str(num1/num2)
    if num1 == 9 and num2 == 10 and operator == "+":
        speech("That's 21")
    else:
        speech("That's " + calcResult.replace("." , " point "))

elif intent == "DoTimer":
    timerFinishedAudio = workingDir+"timerchime.wav"
    number, unit = o["slots"]["time"], o["slots"]["unit"]
    if os.path.exists(stopFilePath):
        os.remove(stopFilePath)
    if unit == "second":
        timerLength = number-1
    elif unit == "minute":
        timerLength = (number*60)-1
    while timerLength:
        time.sleep(1)
        timerLength -=1
        with open(timerLeftPath, "w") as timerLeft:
            timerLeft.write(str(timerLength))
    while not os.path.exists(stopFilePath):
        call(["aplay", timerFinishedAudio])
    if os.path.exists(stopFilePath):
        os.remove(stopFilePath)
    if os.path.exists(timerLeftPath):
        os.remove(timerLeftPath)

elif intent == "GetWeather":
    weather = requests.get(opnwthrurl+"lat="+opnwthrlat+"&lon="+opnwthrlon+"&units="+opnwthrunits+"&appid="+opnwthrauth).json()
    currentTemp, currentDesc = weather["main"]["temp"], weather["weather"][0]["main"]
    speech("It's currently " + str(round(currentTemp)) + " degrees and " + currentDesc)

elif intent == "StopPlaying":
    with open(stopFilePath, 'w') as stopFile:
        pass

elif intent == "TimerRemaining":
    if os.path.exists(timerLeftPath):
        timerRemainingNumber = int(open(timerLeftPath, "r").read()) - 3
        if timerRemainingNumber >= 60:
            speech("There are " + str(math.trunc(timerRemainingNumber/60)) + " minutes and " + str(timerRemainingNumber % 60) + " seconds left")
        else:
            speech("There are " + str(timerRemainingNumber) + " seconds left")
    else:
        speech("You've got no timers set")

elif intent == "BluetoothPairing":
    with open(bluetoothFilePath, "w") as bluetoothFile:
        bluetoothFile.write("bluetooth")
        time.sleep(3)
        os.remove(bluetoothFilePath)

# convert dict to json and print to stdout
print(json.dumps(o))
